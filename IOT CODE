#include <Wire.h>
#include <RTClib.h>

RTC_DS3231 rtc; // Create an instance of the RTC_DS3231 class

// Pin definitions
#define RELAY1_PIN 12
#define RELAY2_PIN 13
#define RAIN_SENSOR_PIN 14

// Scheduled time (24-hour format)
const int scheduledHour = 17;    // 4 PM
const int scheduledMinute = 51;  // 40 minutes

// Pump specifications (100ml in 6 seconds)
const float PUMP_FLOW_RATE = 100.0 / 6.0; // ml per second

// Water quantity in ml
const unsigned long waterQuantityML = 200; // Desired water quantity in ml

// Calculate relay duration based on water quantity
const unsigned long relayDuration = (unsigned long)((waterQuantityML / PUMP_FLOW_RATE) * 1000); // Convert to milliseconds

// Relay control variables
bool relay1State = false;
bool relay2State = false;
bool rainDetected = false;
bool scheduledTimeProcessed = false;
unsigned long relayOnTime = 0;

void setup() {
  Serial.begin(115200);
  Wire.begin();
  
  // Initialize pins
  pinMode(RELAY1_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  pinMode(RAIN_SENSOR_PIN, INPUT_PULLUP);
  
  // Turn off relays initially (assuming active LOW relay)
  digitalWrite(RELAY1_PIN, HIGH);
  digitalWrite(RELAY2_PIN, HIGH);
  
  // Initialize RTC
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }
  
  // Uncomment the following line to set the initial date and time if needed
  // rtc.adjust(DateTime(_DATE, __TIME_));
  
  if (rtc.lostPower()) {
    Serial.println("RTC lost power, setting time...");
    // Set RTC to the compile time of this sketch
    rtc.adjust(DateTime(_DATE, __TIME_));
  }
  
  // Display system information
  Serial.println("System initialized - Relay control system ready");
  Serial.println("==============================================");
  Serial.print("Pump flow rate: ");
  Serial.print(PUMP_FLOW_RATE);
  Serial.println(" ml/second");
  Serial.print("Desired water quantity: ");
  Serial.print(waterQuantityML);
  Serial.println(" ml");
  Serial.print("Calculated relay duration: ");
  Serial.print(relayDuration / 1000.0);
  Serial.println(" seconds");
  Serial.println("==============================================");
}

void loop() {
  // Read the current date and time from the DS3231
  DateTime now = rtc.now();
  
  // Read rain sensor
  rainDetected = !digitalRead(RAIN_SENSOR_PIN); // Assuming sensor gives LOW when rain detected
  
  // Print the date and time
  Serial.print("Date: ");
  Serial.print(now.year(), DEC);
  Serial.print("/");
  printTwoDigits(now.month());
  Serial.print("/");
  printTwoDigits(now.day());
  Serial.print("  Time: ");
  printTwoDigits(now.hour());
  Serial.print(":");
  printTwoDigits(now.minute());
  Serial.print(":");
  printTwoDigits(now.second());
  
  // Print status information
  Serial.print(" | Rain: ");
  Serial.print(rainDetected ? "DETECTED" : "NO RAIN");
  Serial.print(" | Relay1: ");
  Serial.print(relay1State ? "ON" : "OFF");
  Serial.print(" | Relay2: ");
  Serial.print(relay2State ? "ON" : "OFF");
  
  // Display remaining watering time if relays are on
  if (relay1State || relay2State) {
    unsigned long remainingTime = relayDuration - (millis() - relayOnTime);
    Serial.print(" | Watering: ");
    Serial.print(remainingTime / 1000);
    Serial.print("s left (");
    Serial.print((millis() - relayOnTime) * PUMP_FLOW_RATE / 1000.0);
    Serial.print("ml delivered)");
  }
  
  // Check if it's exactly the scheduled time (at 0 seconds)
  if (now.hour() == scheduledHour && now.minute() == scheduledMinute && now.second() == 0) {
    if (!scheduledTimeProcessed) {
      if (!rainDetected) {
        Serial.print(" | Action: Turning ON relays for ");
        Serial.print(waterQuantityML);
        Serial.print("ml (");
        Serial.print(relayDuration / 1000.0);
        Serial.print("s)");
        turnOnRelays();
      } else {
        Serial.print(" | Action: Rain detected - watering canceled");
      }
      scheduledTimeProcessed = true;
    }
  } else {
    // Reset the flag when we're no longer at the scheduled time
    scheduledTimeProcessed = false;
  }
  
  // Check if rain is detected while relays are ON
  if (rainDetected && (relay1State || relay2State)) {
    Serial.print(" | Action: Rain detected - stopping watering");
    turnOffRelays();
  }
  
  // Check if relay timer has expired
  if ((relay1State || relay2State) && (millis() - relayOnTime >= relayDuration)) {
    Serial.print(" | Action: Watering completed (");
    Serial.print(waterQuantityML);
    Serial.print("ml delivered)");
    turnOffRelays();
  }
  
  Serial.println();
  delay(1000); // Update every 1 second
}

void printTwoDigits(int number) {
  if (number < 10) {
    Serial.print("0"); // Print a leading zero for single-digit numbers
  }
  Serial.print(number);
}

void turnOnRelays() {
  if (!rainDetected) {
    relay1State = true;
    relay2State = true;
    digitalWrite(RELAY1_PIN, LOW); // Assuming active LOW relay
    digitalWrite(RELAY2_PIN, LOW);
    relayOnTime = millis();
  }
}

void turnOffRelays() {
  relay1State = false;
  relay2State = false;
  digitalWrite(RELAY1_PIN, HIGH); // Assuming active LOW relay
  digitalWrite(RELAY2_PIN, HIGH);
}
